using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace MediScreenApi.swagger;

public partial class JsonToPdfObject
{
    [JsonProperty("Workspace")]
    public object Workspace { get; set; }

    [JsonProperty("Info", NullValueHandling = NullValueHandling.Ignore)]
    public Info Info { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Paths", NullValueHandling = NullValueHandling.Ignore)]
    public Paths Paths { get; set; }

    [JsonProperty("Components", NullValueHandling = NullValueHandling.Ignore)]
    public Components Components { get; set; }

    [JsonProperty("SecurityRequirements", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> SecurityRequirements { get; set; }

    [JsonProperty("Tags", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Tags { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("HashCode", NullValueHandling = NullValueHandling.Ignore)]
    public string HashCode { get; set; }
}

public partial class Components
{
    [JsonProperty("Schemas", NullValueHandling = NullValueHandling.Ignore)]
    public Schemas Schemas { get; set; }

    [JsonProperty("Responses", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Responses { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Parameters { get; set; }

    [JsonProperty("Examples", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Examples { get; set; }

    [JsonProperty("RequestBodies", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions RequestBodies { get; set; }

    [JsonProperty("Headers", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Headers { get; set; }

    [JsonProperty("SecuritySchemes", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions SecuritySchemes { get; set; }

    [JsonProperty("Links", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Links { get; set; }

    [JsonProperty("Callbacks", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Callbacks { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }
}

public partial class Extensions
{
}

public partial class Schemas
{
    [JsonProperty("ApplicationUser", NullValueHandling = NullValueHandling.Ignore)]
    public ApplicationUser ApplicationUser { get; set; }

    [JsonProperty("LoginViewModel", NullValueHandling = NullValueHandling.Ignore)]
    public LoginViewModel LoginViewModel { get; set; }

    [JsonProperty("Note", NullValueHandling = NullValueHandling.Ignore)]
    public Note Note { get; set; }

    [JsonProperty("Patient", NullValueHandling = NullValueHandling.Ignore)]
    public Patient Patient { get; set; }

    [JsonProperty("RegisterViewModel", NullValueHandling = NullValueHandling.Ignore)]
    public RegisterViewModel RegisterViewModel { get; set; }
}

public partial class ApplicationUser
{
    [JsonProperty("Title")]
    public object Title { get; set; }

    [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    [JsonProperty("Format")]
    public object Format { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Maximum")]
    public object Maximum { get; set; }

    [JsonProperty("ExclusiveMaximum")]
    public object ExclusiveMaximum { get; set; }

    [JsonProperty("Minimum")]
    public object Minimum { get; set; }

    [JsonProperty("ExclusiveMinimum")]
    public object ExclusiveMinimum { get; set; }

    [JsonProperty("MaxLength")]
    public object MaxLength { get; set; }

    [JsonProperty("MinLength")]
    public object MinLength { get; set; }

    [JsonProperty("Pattern")]
    public object Pattern { get; set; }

    [JsonProperty("MultipleOf")]
    public object MultipleOf { get; set; }

    [JsonProperty("Default")]
    public object Default { get; set; }

    [JsonProperty("ReadOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ReadOnly { get; set; }

    [JsonProperty("WriteOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? WriteOnly { get; set; }

    [JsonProperty("AllOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AllOf { get; set; }

    [JsonProperty("OneOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> OneOf { get; set; }

    [JsonProperty("AnyOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AnyOf { get; set; }

    [JsonProperty("Not")]
    public object Not { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> ApplicationUserRequired { get; set; }

    [JsonProperty("Items")]
    public object Items { get; set; }

    [JsonProperty("MaxItems")]
    public object MaxItems { get; set; }

    [JsonProperty("MinItems")]
    public object MinItems { get; set; }

    [JsonProperty("UniqueItems")]
    public object UniqueItems { get; set; }

    [JsonProperty("Properties", NullValueHandling = NullValueHandling.Ignore)]
    public Dictionary<string, Property> Properties { get; set; }

    [JsonProperty("MaxProperties")]
    public object MaxProperties { get; set; }

    [JsonProperty("MinProperties")]
    public object MinProperties { get; set; }

    [JsonProperty("AdditionalPropertiesAllowed", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AdditionalPropertiesAllowed { get; set; }

    [JsonProperty("AdditionalProperties")]
    public object AdditionalProperties { get; set; }

    [JsonProperty("Discriminator")]
    public object Discriminator { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Enum", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Enum { get; set; }

    [JsonProperty("Nullable", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Nullable { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Xml")]
    public object Xml { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class Property
{
    [JsonProperty("Title")]
    public object Title { get; set; }

    [JsonProperty("Type")]
    public TypeEnum? Type { get; set; }

    [JsonProperty("Format")]
    public string Format { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Maximum")]
    public object Maximum { get; set; }

    [JsonProperty("ExclusiveMaximum")]
    public object ExclusiveMaximum { get; set; }

    [JsonProperty("Minimum")]
    public object Minimum { get; set; }

    [JsonProperty("ExclusiveMinimum")]
    public object ExclusiveMinimum { get; set; }

    [JsonProperty("MaxLength")]
    public object MaxLength { get; set; }

    [JsonProperty("MinLength")]
    public object MinLength { get; set; }

    [JsonProperty("Pattern")]
    public object Pattern { get; set; }

    [JsonProperty("MultipleOf")]
    public object MultipleOf { get; set; }

    [JsonProperty("Default")]
    public object Default { get; set; }

    [JsonProperty("ReadOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ReadOnly { get; set; }

    [JsonProperty("WriteOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? WriteOnly { get; set; }

    [JsonProperty("AllOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AllOf { get; set; }

    [JsonProperty("OneOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> OneOf { get; set; }

    [JsonProperty("AnyOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AnyOf { get; set; }

    [JsonProperty("Not")]
    public object Not { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> PropertyRequired { get; set; }

    [JsonProperty("Items")]
    public Property Items { get; set; }

    [JsonProperty("MaxItems")]
    public object MaxItems { get; set; }

    [JsonProperty("MinItems")]
    public object MinItems { get; set; }

    [JsonProperty("UniqueItems")]
    public object UniqueItems { get; set; }

    [JsonProperty("Properties", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Properties { get; set; }

    [JsonProperty("MaxProperties")]
    public object MaxProperties { get; set; }

    [JsonProperty("MinProperties")]
    public object MinProperties { get; set; }

    [JsonProperty("AdditionalPropertiesAllowed", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AdditionalPropertiesAllowed { get; set; }

    [JsonProperty("AdditionalProperties")]
    public object AdditionalProperties { get; set; }

    [JsonProperty("Discriminator")]
    public object Discriminator { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Enum", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Enum { get; set; }

    [JsonProperty("Nullable", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Nullable { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Xml")]
    public object Xml { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public Reference Reference { get; set; }
}

public partial class Reference
{
    [JsonProperty("ExternalResource")]
    public object ExternalResource { get; set; }

    [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
    public long? Type { get; set; }

    [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
    public Id? Id { get; set; }

    [JsonProperty("IsExternal", NullValueHandling = NullValueHandling.Ignore)]
    public bool? IsExternal { get; set; }

    [JsonProperty("IsLocal", NullValueHandling = NullValueHandling.Ignore)]
    public bool? IsLocal { get; set; }

    [JsonProperty("HostDocument")]
    public object HostDocument { get; set; }

    [JsonProperty("ReferenceV3", NullValueHandling = NullValueHandling.Ignore)]
    public ReferenceV3? ReferenceV3 { get; set; }

    [JsonProperty("ReferenceV2", NullValueHandling = NullValueHandling.Ignore)]
    public ReferenceV2? ReferenceV2 { get; set; }
}

public partial class LoginViewModel
{
    [JsonProperty("Title")]
    public object Title { get; set; }

    [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    [JsonProperty("Format")]
    public object Format { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Maximum")]
    public object Maximum { get; set; }

    [JsonProperty("ExclusiveMaximum")]
    public object ExclusiveMaximum { get; set; }

    [JsonProperty("Minimum")]
    public object Minimum { get; set; }

    [JsonProperty("ExclusiveMinimum")]
    public object ExclusiveMinimum { get; set; }

    [JsonProperty("MaxLength")]
    public object MaxLength { get; set; }

    [JsonProperty("MinLength")]
    public object MinLength { get; set; }

    [JsonProperty("Pattern")]
    public object Pattern { get; set; }

    [JsonProperty("MultipleOf")]
    public object MultipleOf { get; set; }

    [JsonProperty("Default")]
    public object Default { get; set; }

    [JsonProperty("ReadOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ReadOnly { get; set; }

    [JsonProperty("WriteOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? WriteOnly { get; set; }

    [JsonProperty("AllOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AllOf { get; set; }

    [JsonProperty("OneOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> OneOf { get; set; }

    [JsonProperty("AnyOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AnyOf { get; set; }

    [JsonProperty("Not")]
    public object Not { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> LoginViewModelRequired { get; set; }

    [JsonProperty("Items")]
    public object Items { get; set; }

    [JsonProperty("MaxItems")]
    public object MaxItems { get; set; }

    [JsonProperty("MinItems")]
    public object MinItems { get; set; }

    [JsonProperty("UniqueItems")]
    public object UniqueItems { get; set; }

    [JsonProperty("Properties", NullValueHandling = NullValueHandling.Ignore)]
    public LoginViewModelProperties Properties { get; set; }

    [JsonProperty("MaxProperties")]
    public object MaxProperties { get; set; }

    [JsonProperty("MinProperties")]
    public object MinProperties { get; set; }

    [JsonProperty("AdditionalPropertiesAllowed", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AdditionalPropertiesAllowed { get; set; }

    [JsonProperty("AdditionalProperties")]
    public object AdditionalProperties { get; set; }

    [JsonProperty("Discriminator")]
    public object Discriminator { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Enum", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Enum { get; set; }

    [JsonProperty("Nullable", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Nullable { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Xml")]
    public object Xml { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class LoginViewModelProperties
{
    [JsonProperty("userName", NullValueHandling = NullValueHandling.Ignore)]
    public Property UserName { get; set; }

    [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
    public Property Password { get; set; }
}

public partial class Note
{
    [JsonProperty("Title")]
    public object Title { get; set; }

    [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    [JsonProperty("Format")]
    public object Format { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Maximum")]
    public object Maximum { get; set; }

    [JsonProperty("ExclusiveMaximum")]
    public object ExclusiveMaximum { get; set; }

    [JsonProperty("Minimum")]
    public object Minimum { get; set; }

    [JsonProperty("ExclusiveMinimum")]
    public object ExclusiveMinimum { get; set; }

    [JsonProperty("MaxLength")]
    public object MaxLength { get; set; }

    [JsonProperty("MinLength")]
    public object MinLength { get; set; }

    [JsonProperty("Pattern")]
    public object Pattern { get; set; }

    [JsonProperty("MultipleOf")]
    public object MultipleOf { get; set; }

    [JsonProperty("Default")]
    public object Default { get; set; }

    [JsonProperty("ReadOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ReadOnly { get; set; }

    [JsonProperty("WriteOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? WriteOnly { get; set; }

    [JsonProperty("AllOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AllOf { get; set; }

    [JsonProperty("OneOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> OneOf { get; set; }

    [JsonProperty("AnyOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AnyOf { get; set; }

    [JsonProperty("Not")]
    public object Not { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> NoteRequired { get; set; }

    [JsonProperty("Items")]
    public object Items { get; set; }

    [JsonProperty("MaxItems")]
    public object MaxItems { get; set; }

    [JsonProperty("MinItems")]
    public object MinItems { get; set; }

    [JsonProperty("UniqueItems")]
    public object UniqueItems { get; set; }

    [JsonProperty("Properties", NullValueHandling = NullValueHandling.Ignore)]
    public NoteProperties Properties { get; set; }

    [JsonProperty("MaxProperties")]
    public object MaxProperties { get; set; }

    [JsonProperty("MinProperties")]
    public object MinProperties { get; set; }

    [JsonProperty("AdditionalPropertiesAllowed", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AdditionalPropertiesAllowed { get; set; }

    [JsonProperty("AdditionalProperties")]
    public object AdditionalProperties { get; set; }

    [JsonProperty("Discriminator")]
    public object Discriminator { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Enum", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Enum { get; set; }

    [JsonProperty("Nullable", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Nullable { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Xml")]
    public object Xml { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class NoteProperties
{
    [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
    public Property Id { get; set; }

    [JsonProperty("patientId", NullValueHandling = NullValueHandling.Ignore)]
    public Property PatientId { get; set; }

    [JsonProperty("doctorId", NullValueHandling = NullValueHandling.Ignore)]
    public Property DoctorId { get; set; }

    [JsonProperty("visitDate", NullValueHandling = NullValueHandling.Ignore)]
    public Property VisitDate { get; set; }

    [JsonProperty("noteText", NullValueHandling = NullValueHandling.Ignore)]
    public Property NoteText { get; set; }

    [JsonProperty("noteGuid", NullValueHandling = NullValueHandling.Ignore)]
    public Property NoteGuid { get; set; }
}

public partial class Patient
{
    [JsonProperty("Title")]
    public object Title { get; set; }

    [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    [JsonProperty("Format")]
    public object Format { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Maximum")]
    public object Maximum { get; set; }

    [JsonProperty("ExclusiveMaximum")]
    public object ExclusiveMaximum { get; set; }

    [JsonProperty("Minimum")]
    public object Minimum { get; set; }

    [JsonProperty("ExclusiveMinimum")]
    public object ExclusiveMinimum { get; set; }

    [JsonProperty("MaxLength")]
    public object MaxLength { get; set; }

    [JsonProperty("MinLength")]
    public object MinLength { get; set; }

    [JsonProperty("Pattern")]
    public object Pattern { get; set; }

    [JsonProperty("MultipleOf")]
    public object MultipleOf { get; set; }

    [JsonProperty("Default")]
    public object Default { get; set; }

    [JsonProperty("ReadOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ReadOnly { get; set; }

    [JsonProperty("WriteOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? WriteOnly { get; set; }

    [JsonProperty("AllOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AllOf { get; set; }

    [JsonProperty("OneOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> OneOf { get; set; }

    [JsonProperty("AnyOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AnyOf { get; set; }

    [JsonProperty("Not")]
    public object Not { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> PatientRequired { get; set; }

    [JsonProperty("Items")]
    public object Items { get; set; }

    [JsonProperty("MaxItems")]
    public object MaxItems { get; set; }

    [JsonProperty("MinItems")]
    public object MinItems { get; set; }

    [JsonProperty("UniqueItems")]
    public object UniqueItems { get; set; }

    [JsonProperty("Properties", NullValueHandling = NullValueHandling.Ignore)]
    public PatientProperties Properties { get; set; }

    [JsonProperty("MaxProperties")]
    public object MaxProperties { get; set; }

    [JsonProperty("MinProperties")]
    public object MinProperties { get; set; }

    [JsonProperty("AdditionalPropertiesAllowed", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AdditionalPropertiesAllowed { get; set; }

    [JsonProperty("AdditionalProperties")]
    public object AdditionalProperties { get; set; }

    [JsonProperty("Discriminator")]
    public object Discriminator { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Enum", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Enum { get; set; }

    [JsonProperty("Nullable", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Nullable { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Xml")]
    public object Xml { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class PatientProperties
{
    [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
    public Property Id { get; set; }

    [JsonProperty("age", NullValueHandling = NullValueHandling.Ignore)]
    public Property Age { get; set; }

    [JsonProperty("fName", NullValueHandling = NullValueHandling.Ignore)]
    public Property FName { get; set; }

    [JsonProperty("lName", NullValueHandling = NullValueHandling.Ignore)]
    public Property LName { get; set; }

    [JsonProperty("dob", NullValueHandling = NullValueHandling.Ignore)]
    public Property Dob { get; set; }

    [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
    public Property Gender { get; set; }

    [JsonProperty("address", NullValueHandling = NullValueHandling.Ignore)]
    public Property Address { get; set; }

    [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
    public Property Phone { get; set; }

    [JsonProperty("diabetesRisk", NullValueHandling = NullValueHandling.Ignore)]
    public Property DiabetesRisk { get; set; }
}

public partial class RegisterViewModel
{
    [JsonProperty("Title")]
    public object Title { get; set; }

    [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    [JsonProperty("Format")]
    public object Format { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Maximum")]
    public object Maximum { get; set; }

    [JsonProperty("ExclusiveMaximum")]
    public object ExclusiveMaximum { get; set; }

    [JsonProperty("Minimum")]
    public object Minimum { get; set; }

    [JsonProperty("ExclusiveMinimum")]
    public object ExclusiveMinimum { get; set; }

    [JsonProperty("MaxLength")]
    public object MaxLength { get; set; }

    [JsonProperty("MinLength")]
    public object MinLength { get; set; }

    [JsonProperty("Pattern")]
    public object Pattern { get; set; }

    [JsonProperty("MultipleOf")]
    public object MultipleOf { get; set; }

    [JsonProperty("Default")]
    public object Default { get; set; }

    [JsonProperty("ReadOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ReadOnly { get; set; }

    [JsonProperty("WriteOnly", NullValueHandling = NullValueHandling.Ignore)]
    public bool? WriteOnly { get; set; }

    [JsonProperty("AllOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AllOf { get; set; }

    [JsonProperty("OneOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> OneOf { get; set; }

    [JsonProperty("AnyOf", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> AnyOf { get; set; }

    [JsonProperty("Not")]
    public object Not { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> RegisterViewModelRequired { get; set; }

    [JsonProperty("Items")]
    public object Items { get; set; }

    [JsonProperty("MaxItems")]
    public object MaxItems { get; set; }

    [JsonProperty("MinItems")]
    public object MinItems { get; set; }

    [JsonProperty("UniqueItems")]
    public object UniqueItems { get; set; }

    [JsonProperty("Properties", NullValueHandling = NullValueHandling.Ignore)]
    public RegisterViewModelProperties Properties { get; set; }

    [JsonProperty("MaxProperties")]
    public object MaxProperties { get; set; }

    [JsonProperty("MinProperties")]
    public object MinProperties { get; set; }

    [JsonProperty("AdditionalPropertiesAllowed", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AdditionalPropertiesAllowed { get; set; }

    [JsonProperty("AdditionalProperties")]
    public object AdditionalProperties { get; set; }

    [JsonProperty("Discriminator")]
    public object Discriminator { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Enum", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Enum { get; set; }

    [JsonProperty("Nullable", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Nullable { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Xml")]
    public object Xml { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class RegisterViewModelProperties
{
    [JsonProperty("userName", NullValueHandling = NullValueHandling.Ignore)]
    public Property UserName { get; set; }

    [JsonProperty("email", NullValueHandling = NullValueHandling.Ignore)]
    public Property Email { get; set; }

    [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
    public Property Password { get; set; }
}

public partial class Info
{
    [JsonProperty("Title", NullValueHandling = NullValueHandling.Ignore)]
    public string Title { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Version", NullValueHandling = NullValueHandling.Ignore)]
    public string Version { get; set; }

    [JsonProperty("TermsOfService")]
    public object TermsOfService { get; set; }

    [JsonProperty("Contact")]
    public object Contact { get; set; }

    [JsonProperty("License")]
    public object License { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }
}

public partial class Paths
{
    [JsonProperty("/api/Assess/byId/{id}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiAssessByIdId { get; set; }

    [JsonProperty("/api/Assess/byFamilyName/{familyName}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiAssessByFamilyNameFamilyName { get; set; }

    [JsonProperty("/api/Auth/GetAllUsers", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiAuthGetAllUsers { get; set; }

    [JsonProperty("/api/Auth/Register", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAuthLoginClass ApiAuthRegister { get; set; }

    [JsonProperty("/api/Auth/UserExists", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAuthUserExistsClass ApiAuthUserExists { get; set; }

    [JsonProperty("/api/Auth/Login", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAuthLoginClass ApiAuthLogin { get; set; }

    [JsonProperty("/api/Notes/GetAllNotes", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiNotesGetAllNotes { get; set; }

    [JsonProperty("/api/Notes/CountPatientNotes/{patientId}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiNotesCountPatientNotesPatientId { get; set; }

    [JsonProperty("/api/Notes/GetPatientNotes/{patientId}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAuthUserExistsClass ApiNotesGetPatientNotesPatientId { get; set; }

    [JsonProperty("/api/Notes/GetNote/{id}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiNotesGetNoteId { get; set; }

    [JsonProperty("/api/Notes/CreateNote", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAuthLoginClass ApiNotesCreateNote { get; set; }

    [JsonProperty("/api/Notes/UpdateNote/{id}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiNotesUpdateNoteIdClass ApiNotesUpdateNoteId { get; set; }

    [JsonProperty("/api/Notes/DeleteNote/{id}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiNotesDeleteAllPatientNotesPatientIdClass ApiNotesDeleteNoteId { get; set; }

    [JsonProperty("/api/Notes/DeleteAllPatientNotes/{patientId }", NullValueHandling = NullValueHandling.Ignore)]
    public ApiNotesDeleteAllPatientNotesPatientIdClass ApiNotesDeleteAllPatientNotesPatientId { get; set; }

    [JsonProperty("/api/Patients/GetAllPatients", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiPatientsGetAllPatients { get; set; }

    [JsonProperty("/api/Patients/GetOnePatient", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameClass ApiPatientsGetOnePatient { get; set; }

    [JsonProperty("/api/Patients/CreatePatient", NullValueHandling = NullValueHandling.Ignore)]
    public ApiPatientsCreatePatient ApiPatientsCreatePatient { get; set; }

    [JsonProperty("/api/Patients/UpdatePatient/{id}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiNotesUpdateNoteIdClass ApiPatientsUpdatePatientId { get; set; }

    [JsonProperty("/api/Patients/DeletePatient/{id}", NullValueHandling = NullValueHandling.Ignore)]
    public ApiNotesDeleteAllPatientNotesPatientIdClass ApiPatientsDeletePatientId { get; set; }
}

public partial class ApiAssessByFamilyNameFamilyNameClass
{
    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Operations", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAssessByFamilyNameFamilyNameOperations Operations { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Parameters { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiAssessByFamilyNameFamilyNameOperations
{
    [JsonProperty("Get", NullValueHandling = NullValueHandling.Ignore)]
    public Get Get { get; set; }
}

public partial class Get
{
    [JsonProperty("Tags", NullValueHandling = NullValueHandling.Ignore)]
    public List<Tag> Tags { get; set; }

    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("OperationId")]
    public object OperationId { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<Parameter> Parameters { get; set; }

    [JsonProperty("RequestBody")]
    public RequestBody RequestBody { get; set; }

    [JsonProperty("Responses", NullValueHandling = NullValueHandling.Ignore)]
    public PurpleResponses Responses { get; set; }

    [JsonProperty("Callbacks", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Callbacks { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Security", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Security { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }
}

public partial class Parameter
{
    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }

    [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name { get; set; }

    [JsonProperty("In", NullValueHandling = NullValueHandling.Ignore)]
    public long? In { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ParameterRequired { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("AllowEmptyValue", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AllowEmptyValue { get; set; }

    [JsonProperty("Style", NullValueHandling = NullValueHandling.Ignore)]
    public long? Style { get; set; }

    [JsonProperty("Explode", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Explode { get; set; }

    [JsonProperty("AllowReserved", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AllowReserved { get; set; }

    [JsonProperty("Schema", NullValueHandling = NullValueHandling.Ignore)]
    public Property Schema { get; set; }

    [JsonProperty("Examples", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Examples { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Content", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Content { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }
}

public partial class RequestBody
{
    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Required", NullValueHandling = NullValueHandling.Ignore)]
    public bool? RequestBodyRequired { get; set; }

    [JsonProperty("Content", NullValueHandling = NullValueHandling.Ignore)]
    public RequestBodyContent Content { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }
}

public partial class RequestBodyContent
{
    [JsonProperty("application/json", NullValueHandling = NullValueHandling.Ignore)]
    public ApplicationJson ContentApplicationJson { get; set; }

    [JsonProperty("text/json", NullValueHandling = NullValueHandling.Ignore)]
    public ApplicationJson TextJson { get; set; }

    [JsonProperty("application/*+json", NullValueHandling = NullValueHandling.Ignore)]
    public ApplicationJson ApplicationJson { get; set; }
}

public partial class ApplicationJson
{
    [JsonProperty("Schema", NullValueHandling = NullValueHandling.Ignore)]
    public Property Schema { get; set; }

    [JsonProperty("Example")]
    public object Example { get; set; }

    [JsonProperty("Examples", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Examples { get; set; }

    [JsonProperty("Encoding", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Encoding { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }
}

public partial class PurpleResponses
{
    [JsonProperty("200", NullValueHandling = NullValueHandling.Ignore)]
    public Purple200 The200 { get; set; }
}

public partial class Purple200
{
    [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
    public Description? Description { get; set; }

    [JsonProperty("Headers", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Headers { get; set; }

    [JsonProperty("Content", NullValueHandling = NullValueHandling.Ignore)]
    public The200_Content Content { get; set; }

    [JsonProperty("Links", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Links { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class The200_Content
{
    [JsonProperty("text/plain", NullValueHandling = NullValueHandling.Ignore)]
    public ApplicationJson TextPlain { get; set; }

    [JsonProperty("application/json", NullValueHandling = NullValueHandling.Ignore)]
    public ApplicationJson ApplicationJson { get; set; }

    [JsonProperty("text/json", NullValueHandling = NullValueHandling.Ignore)]
    public ApplicationJson TextJson { get; set; }
}

public partial class Tag
{
    [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
    public Name? Name { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiAuthLoginClass
{
    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Operations", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAuthLoginOperations Operations { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Parameters { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiAuthLoginOperations
{
    [JsonProperty("Post", NullValueHandling = NullValueHandling.Ignore)]
    public Post Post { get; set; }
}

public partial class Post
{
    [JsonProperty("Tags", NullValueHandling = NullValueHandling.Ignore)]
    public List<Tag> Tags { get; set; }

    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("ExternalDocs")]
    public object ExternalDocs { get; set; }

    [JsonProperty("OperationId")]
    public object OperationId { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<Parameter> Parameters { get; set; }

    [JsonProperty("RequestBody")]
    public RequestBody RequestBody { get; set; }

    [JsonProperty("Responses", NullValueHandling = NullValueHandling.Ignore)]
    public DeleteResponses Responses { get; set; }

    [JsonProperty("Callbacks", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Callbacks { get; set; }

    [JsonProperty("Deprecated", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Deprecated { get; set; }

    [JsonProperty("Security", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Security { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }
}

public partial class DeleteResponses
{
    [JsonProperty("200", NullValueHandling = NullValueHandling.Ignore)]
    public Fluffy200 The200 { get; set; }
}

public partial class Fluffy200
{
    [JsonProperty("Description", NullValueHandling = NullValueHandling.Ignore)]
    public Description? Description { get; set; }

    [JsonProperty("Headers", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Headers { get; set; }

    [JsonProperty("Content", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Content { get; set; }

    [JsonProperty("Links", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Links { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiAuthUserExistsClass
{
    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Operations", NullValueHandling = NullValueHandling.Ignore)]
    public ApiAuthUserExistsOperations Operations { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Parameters { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiAuthUserExistsOperations
{
    [JsonProperty("Get", NullValueHandling = NullValueHandling.Ignore)]
    public Post Get { get; set; }
}

public partial class ApiNotesDeleteAllPatientNotesPatientIdClass
{
    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Operations", NullValueHandling = NullValueHandling.Ignore)]
    public ApiNotesDeleteAllPatientNotesPatientIdOperations Operations { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Parameters { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiNotesDeleteAllPatientNotesPatientIdOperations
{
    [JsonProperty("Delete", NullValueHandling = NullValueHandling.Ignore)]
    public Post Delete { get; set; }
}

public partial class ApiNotesUpdateNoteIdClass
{
    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Operations", NullValueHandling = NullValueHandling.Ignore)]
    public ApiNotesUpdateNoteIdOperations Operations { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Parameters { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiNotesUpdateNoteIdOperations
{
    [JsonProperty("Put", NullValueHandling = NullValueHandling.Ignore)]
    public Post Put { get; set; }
}

public partial class ApiPatientsCreatePatient
{
    [JsonProperty("Summary")]
    public object Summary { get; set; }

    [JsonProperty("Description")]
    public object Description { get; set; }

    [JsonProperty("Operations", NullValueHandling = NullValueHandling.Ignore)]
    public ApiPatientsCreatePatientOperations Operations { get; set; }

    [JsonProperty("Servers", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Servers { get; set; }

    [JsonProperty("Parameters", NullValueHandling = NullValueHandling.Ignore)]
    public List<object> Parameters { get; set; }

    [JsonProperty("Extensions", NullValueHandling = NullValueHandling.Ignore)]
    public Extensions Extensions { get; set; }

    [JsonProperty("UnresolvedReference", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UnresolvedReference { get; set; }

    [JsonProperty("Reference")]
    public object Reference { get; set; }
}

public partial class ApiPatientsCreatePatientOperations
{
    [JsonProperty("Post", NullValueHandling = NullValueHandling.Ignore)]
    public Get Post { get; set; }
}

public enum Id { ApplicationUser, LoginViewModel, Note, Patient, RegisterViewModel };

public enum ReferenceV2 { DefinitionsApplicationUser, DefinitionsLoginViewModel, DefinitionsNote, DefinitionsPatient, DefinitionsRegisterViewModel };

public enum ReferenceV3 { ComponentsSchemasApplicationUser, ComponentsSchemasLoginViewModel, ComponentsSchemasNote, ComponentsSchemasPatient, ComponentsSchemasRegisterViewModel };

public enum TypeEnum { Array, Boolean, Integer, String };

public enum Description { Success };

public enum Name { Assess, Auth, Notes, Patients };

public partial class JsonToPdfObject
{
    public static JsonToPdfObject? FromJson(string json) => JsonConvert.DeserializeObject<JsonToPdfObject>(json, Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this JsonToPdfObject self) => JsonConvert.SerializeObject(self, Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings? Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
            IdConverter.Singleton,
            ReferenceV2Converter.Singleton,
            ReferenceV3Converter.Singleton,
            TypeEnumConverter.Singleton,
            DescriptionConverter.Singleton,
            NameConverter.Singleton,
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class IdConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Id) || t == typeof(Id?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "ApplicationUser":
                return Id.ApplicationUser;
            case "LoginViewModel":
                return Id.LoginViewModel;
            case "Note":
                return Id.Note;
            case "Patient":
                return Id.Patient;
            case "RegisterViewModel":
                return Id.RegisterViewModel;
        }
        throw new Exception("Cannot unmarshal type Id");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Id)untypedValue;
        switch (value)
        {
            case Id.ApplicationUser:
                serializer.Serialize(writer, "ApplicationUser");
                return;
            case Id.LoginViewModel:
                serializer.Serialize(writer, "LoginViewModel");
                return;
            case Id.Note:
                serializer.Serialize(writer, "Note");
                return;
            case Id.Patient:
                serializer.Serialize(writer, "Patient");
                return;
            case Id.RegisterViewModel:
                serializer.Serialize(writer, "RegisterViewModel");
                return;
        }
        throw new Exception("Cannot marshal type Id");
    }

    public static readonly IdConverter Singleton = new IdConverter();
}

internal class ReferenceV2Converter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(ReferenceV2) || t == typeof(ReferenceV2?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "#/definitions/ApplicationUser":
                return ReferenceV2.DefinitionsApplicationUser;
            case "#/definitions/LoginViewModel":
                return ReferenceV2.DefinitionsLoginViewModel;
            case "#/definitions/Note":
                return ReferenceV2.DefinitionsNote;
            case "#/definitions/Patient":
                return ReferenceV2.DefinitionsPatient;
            case "#/definitions/RegisterViewModel":
                return ReferenceV2.DefinitionsRegisterViewModel;
        }
        throw new Exception("Cannot unmarshal type ReferenceV2");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (ReferenceV2)untypedValue;
        switch (value)
        {
            case ReferenceV2.DefinitionsApplicationUser:
                serializer.Serialize(writer, "#/definitions/ApplicationUser");
                return;
            case ReferenceV2.DefinitionsLoginViewModel:
                serializer.Serialize(writer, "#/definitions/LoginViewModel");
                return;
            case ReferenceV2.DefinitionsNote:
                serializer.Serialize(writer, "#/definitions/Note");
                return;
            case ReferenceV2.DefinitionsPatient:
                serializer.Serialize(writer, "#/definitions/Patient");
                return;
            case ReferenceV2.DefinitionsRegisterViewModel:
                serializer.Serialize(writer, "#/definitions/RegisterViewModel");
                return;
        }
        throw new Exception("Cannot marshal type ReferenceV2");
    }

    public static readonly ReferenceV2Converter Singleton = new ReferenceV2Converter();
}

internal class ReferenceV3Converter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(ReferenceV3) || t == typeof(ReferenceV3?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "#/components/schemas/ApplicationUser":
                return ReferenceV3.ComponentsSchemasApplicationUser;
            case "#/components/schemas/LoginViewModel":
                return ReferenceV3.ComponentsSchemasLoginViewModel;
            case "#/components/schemas/Note":
                return ReferenceV3.ComponentsSchemasNote;
            case "#/components/schemas/Patient":
                return ReferenceV3.ComponentsSchemasPatient;
            case "#/components/schemas/RegisterViewModel":
                return ReferenceV3.ComponentsSchemasRegisterViewModel;
        }
        throw new Exception("Cannot unmarshal type ReferenceV3");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (ReferenceV3)untypedValue;
        switch (value)
        {
            case ReferenceV3.ComponentsSchemasApplicationUser:
                serializer.Serialize(writer, "#/components/schemas/ApplicationUser");
                return;
            case ReferenceV3.ComponentsSchemasLoginViewModel:
                serializer.Serialize(writer, "#/components/schemas/LoginViewModel");
                return;
            case ReferenceV3.ComponentsSchemasNote:
                serializer.Serialize(writer, "#/components/schemas/Note");
                return;
            case ReferenceV3.ComponentsSchemasPatient:
                serializer.Serialize(writer, "#/components/schemas/Patient");
                return;
            case ReferenceV3.ComponentsSchemasRegisterViewModel:
                serializer.Serialize(writer, "#/components/schemas/RegisterViewModel");
                return;
        }
        throw new Exception("Cannot marshal type ReferenceV3");
    }

    public static readonly ReferenceV3Converter Singleton = new ReferenceV3Converter();
}

internal class TypeEnumConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "array":
                return TypeEnum.Array;
            case "boolean":
                return TypeEnum.Boolean;
            case "integer":
                return TypeEnum.Integer;
            case "string":
                return TypeEnum.String;
        }
        throw new Exception("Cannot unmarshal type TypeEnum");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (TypeEnum)untypedValue;
        switch (value)
        {
            case TypeEnum.Array:
                serializer.Serialize(writer, "array");
                return;
            case TypeEnum.Boolean:
                serializer.Serialize(writer, "boolean");
                return;
            case TypeEnum.Integer:
                serializer.Serialize(writer, "integer");
                return;
            case TypeEnum.String:
                serializer.Serialize(writer, "string");
                return;
        }
        throw new Exception("Cannot marshal type TypeEnum");
    }

    public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
}

internal class DescriptionConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Description) || t == typeof(Description?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        if (value == "Success")
        {
            return Description.Success;
        }
        throw new Exception("Cannot unmarshal type Description");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Description)untypedValue;
        if (value == Description.Success)
        {
            serializer.Serialize(writer, "Success");
            return;
        }
        throw new Exception("Cannot marshal type Description");
    }

    public static readonly DescriptionConverter Singleton = new DescriptionConverter();
}

internal class NameConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "Assess":
                return Name.Assess;
            case "Auth":
                return Name.Auth;
            case "Notes":
                return Name.Notes;
            case "Patients":
                return Name.Patients;
        }
        throw new Exception("Cannot unmarshal type Name");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Name)untypedValue;
        switch (value)
        {
            case Name.Assess:
                serializer.Serialize(writer, "Assess");
                return;
            case Name.Auth:
                serializer.Serialize(writer, "Auth");
                return;
            case Name.Notes:
                serializer.Serialize(writer, "Notes");
                return;
            case Name.Patients:
                serializer.Serialize(writer, "Patients");
                return;
        }
        throw new Exception("Cannot marshal type Name");
    }

    public static readonly NameConverter Singleton = new NameConverter();
}