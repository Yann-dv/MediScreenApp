@using Microsoft.IdentityModel.Tokens
@model List<Patient>

@{
    ViewBag.Title = "Services";

    string TruncateUserId(string userId, int maxLength)
    {
        if (userId.Length <= maxLength)
        {
            return userId;
        }
        else
        {
            return userId.Substring(0, maxLength) + "..."; // Display the first "maxLength" characters with ellipsis
        }
    }
}

<section class="container p-4">
    <h2>@ViewData["Title"]</h2>
    <div class="services-container d-flex">
        <div class="services-form">
            <!-- Dropend buttons -->
            <div class="btn-group dropend my-2">
                <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">           
                    Patients
                </button>
                <ul class="dropdown-menu my-2 bg-secondary">
                    <li>
                        <div class="dropdown-item">
                            <h3>List all patients</h3>
                            @using (Html.BeginForm("ListPatients", "Services", FormMethod.Post, new { @class="mx-4" }))
                            {
                                <button type="submit" class="btn btn-primary my-2">List all patients</button>
                            }
                        </div>
                    </li>
                    <li>
                        <div class="dropdown-item">
                            <h3>Find a patient</h3>
                            @using (Html.BeginForm("GetOnePatient", "Services", FormMethod.Post, new { @class = "mx-4" }))
                            {
                                <div class="form-group">
                                    <input type="text" class="form-control" id="query" name="query" placeholder="Enter a query">
                                </div>    
                                <button type="submit" class="btn btn-primary my-2">Search</button>}
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div id="services-ouptut" class="ms-4 d-grid container">
            <!-- Toast for copy to clipboard -->
            <div class="toast" id="copiedToast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="mr-auto">Id Copied &nbsp;</strong>
                    <button type="button" class="ml-2 mb-1 close" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="toast-body">
                    The Patient Id has been copied to the clipboard.
                </div>
            </div>
            <div class="row">
                @if (!Model.IsNullOrEmpty() && Model.Count > 0)
                {
                    foreach (var patient in @Model)
                    {
                        <div class="patient-card card-body primary-border rounded m-3 p-3">
                            <i class="fa-regular fa-user">&nbsp;</i>
                            <span title="@patient.Id">Id: @TruncateUserId(patient.Id, 28) &nbsp;</span>
                            <button title="Copy to clipoard" class="btn btn-primary" onclick="copyToClipboard('@patient.Id')"><i class="fa-solid fa-copy fs-6"></i></button>
                            <ul>
                                <li>Gender: @patient.Gender</li>
                                <li>First Name: @patient.FName</li>
                                <li>Last Name: @patient.LName</li>
                                <li>Date of Birth: @patient.Dob</li>
                                <li>Address: @patient.Address</li>
                                <li>Phone: @patient.Phone</li>
                            </ul>
                        </div>
                    }
                }
                else
                {
                    <div class="card-body primary-border rounded w-25 m-3 p-3">
                        <p>No data found</p>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@section Scripts {
  <script>
  
   function copyToClipboard(text) {
           const el = document.createElement('textarea');
           el.value = text;
           document.body.appendChild(el);
           el.select();
           document.execCommand('copy');
           document.body.removeChild(el);
   
           const toastElement = document.getElementById('copiedToast');
           const toast = new bootstrap.Toast(toastElement);
           toast.show();
   
 
           const closeBtn = toastElement.querySelector('.close');
           closeBtn.addEventListener('click', function () {
               toast.hide();
           });
   
           setTimeout(function () {
               toast.hide();
           }, 2000); 
       }
  
      //Blur background effect
      let isDropdownOpen = false;
  
      function blurContent() {
          const content = document.querySelector('#services-ouptut');
          content.classList.add('blur');
      }
  
      function unblurContent() {
          const content = document.querySelector('#services-ouptut');
          content.classList.remove('blur');
      }
  
      const dropdownButton = document.querySelector('.dropdown-toggle');
      const dropdownMenu = document.querySelector('.dropdown-menu');
  
      dropdownButton.addEventListener('click', function() {
          if (isDropdownOpen) {
              unblurContent();
          } else {
              blurContent();
          }
          isDropdownOpen = !isDropdownOpen;
      });
  
      // Add a click event listener to the document to unblur content when clicked outside the dropdown
      document.addEventListener('click', function(event) {
          if (!dropdownButton.contains(event.target) && !dropdownMenu.contains(event.target)) {
              unblurContent();
              isDropdownOpen = false;
          }
      });
  </script>

}